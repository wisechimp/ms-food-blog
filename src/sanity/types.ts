// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type GenericTable = Table;

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet";
      markDefs?: Array<
        | {
            href?: string;
            _type: "link";
            _key: string;
          }
        | {
            text?: string;
            index?: string;
            _type: "footnote";
            _key: string;
          }
      >;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      altText?: string;
      _type: "image";
      _key: string;
    }
  | ({
      _key: string;
    } & GenericTable)
>;

export type Tag = {
  _id: string;
  _type: "tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  excerpt?: string;
  mainImageData?: MainImageObject;
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "tag";
  }>;
  publishedAt?: string;
  body?: BlockContent;
};

export type MainImageObject = {
  _type: "mainImageObject";
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Table = {
  _type: "table";
  rows?: Array<
    {
      _key: string;
    } & TableRow
  >;
};

export type TableRow = {
  _type: "tableRow";
  cells?: Array<string>;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | GenericTable
  | BlockContent
  | Tag
  | Post
  | MainImageObject
  | Author
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | Table
  | TableRow;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: getAllPosts
// Query: *[_type == "post"] | order(publishedAt desc) {      _id,      title,      excerpt,      "slug": slug.current,      publishedAt,      author,      "mainImageSrc": mainImageData.mainImage.asset->url,      "mainImageAltText": mainImageData.altText,      "mainImageAspectRatio": mainImageData.mainImage.asset->metadata.dimensions.aspectRatio,    }
export type GetAllPostsResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  slug: string | null;
  publishedAt: string | null;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  } | null;
  mainImageSrc: string | null;
  mainImageAltText: string | null;
  mainImageAspectRatio: number | null;
}>;
// Variable: getTaggedPosts
// Query: *[_type == "post" && $slug in tags[]->slug.current] | order(publishedAt desc) {      _id,      title,      excerpt,      "slug": slug.current,      publishedAt,      author,      "mainImageSrc": mainImageData.mainImage.asset->url,      "mainImageAltText": mainImageData.altText,      "mainImageAspectRatio": mainImageData.mainImage.asset->metadata.dimensions.aspectRatio,      tags[]->{title, description}    }
export type GetTaggedPostsResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  slug: string | null;
  publishedAt: string | null;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  } | null;
  mainImageSrc: string | null;
  mainImageAltText: string | null;
  mainImageAspectRatio: number | null;
  tags: Array<{
    title: string | null;
    description: string | null;
  }> | null;
}>;
// Variable: getPost
// Query: *[_type == "post" && slug.current == $slug][0]{      _id,      _createdAt,      _rawBody,      title,      excerpt,      "slug": slug.current,      publishedAt,      author->{name},      tags[]->{_id, title},      "mainImageSrc": mainImageData.mainImage.asset->url,      "mainImageAltText": mainImageData.altText,      "mainImageAspectRatio": mainImageData.mainImage.asset->metadata.dimensions.aspectRatio,      body[]    }
export type GetPostResult = {
  _id: string;
  _createdAt: string;
  _rawBody: null;
  title: string | null;
  excerpt: string | null;
  slug: string | null;
  publishedAt: string | null;
  author: {
    name: string | null;
  } | null;
  tags: Array<{
    _id: string;
    title: string | null;
  }> | null;
  mainImageSrc: string | null;
  mainImageAltText: string | null;
  mainImageAspectRatio: number | null;
  body: Array<
    | ({
        _key: string;
      } & GenericTable)
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs?: Array<
          | {
              text?: string;
              index?: string;
              _type: "footnote";
              _key: string;
            }
          | {
              href?: string;
              _type: "link";
              _key: string;
            }
        >;
        level?: number;
        _type: "block";
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        altText?: string;
        _type: "image";
        _key: string;
      }
  > | null;
} | null;
// Variable: getAuthor
// Query: *[_type == "author"][0]{      _id,      _createdAt,      name,      bio,      "image": mainImage.asset->url,      "imageAltText": mainImage.altText    }
export type GetAuthorResult = {
  _id: string;
  _createdAt: string;
  name: string | null;
  bio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  image: null;
  imageAltText: null;
} | null;
// Variable: getTag
// Query: *[_type == "tag" && slug.current == $slug][0]{      _id,      title,      description    }
export type GetTagResult = {
  _id: string;
  title: string | null;
  description: string | null;
} | null;

declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "post"] | order(publishedAt desc) {\n      _id,\n      title,\n      excerpt,\n      "slug": slug.current,\n      publishedAt,\n      author,\n      "mainImageSrc": mainImageData.mainImage.asset->url,\n      "mainImageAltText": mainImageData.altText,\n      "mainImageAspectRatio": mainImageData.mainImage.asset->metadata.dimensions.aspectRatio,\n    }\n  ': GetAllPostsResult;
    '*[_type == "post" && $slug in tags[]->slug.current] | order(publishedAt desc) {\n      _id,\n      title,\n      excerpt,\n      "slug": slug.current,\n      publishedAt,\n      author,\n      "mainImageSrc": mainImageData.mainImage.asset->url,\n      "mainImageAltText": mainImageData.altText,\n      "mainImageAspectRatio": mainImageData.mainImage.asset->metadata.dimensions.aspectRatio,\n      tags[]->{title, description}\n    }': GetTaggedPostsResult;
    '*[_type == "post" && slug.current == $slug][0]{\n      _id,\n      _createdAt,\n      _rawBody,\n      title,\n      excerpt,\n      "slug": slug.current,\n      publishedAt,\n      author->{name},\n      tags[]->{_id, title},\n      "mainImageSrc": mainImageData.mainImage.asset->url,\n      "mainImageAltText": mainImageData.altText,\n      "mainImageAspectRatio": mainImageData.mainImage.asset->metadata.dimensions.aspectRatio,\n      body[]\n    }': GetPostResult;
    '*[_type == "author"][0]{\n      _id,\n      _createdAt,\n      name,\n      bio,\n      "image": mainImage.asset->url,\n      "imageAltText": mainImage.altText\n    }': GetAuthorResult;
    '*[_type == "tag" && slug.current == $slug][0]{\n      _id,\n      title,\n      description\n    }\n  ': GetTagResult;
  }
}
